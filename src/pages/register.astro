---
import RegisterForm from "../components/form/RegisterForm";
import FullScreenLayout from "../layouts/FullScreenLayout.astro";
import { API_URL } from "./async/utils";
import ButtonLink from "../components/ButtonLink";
import EmailVerifier from "../components/register/EmailVerifier";
import EmailVerifiedMessage from "../components/register/EmailVerifiedMessage";

const REGISTRATION_STEPS = ['Create account', 'Verify email', 'Select plan', 'Done!'];

enum RegistrationStep {
    CREATE_ACCOUNT = 0,
    VERIFY_EMAIL = 1,
    SELECT_PLAN = 2,
    DONE = 3
}

const verificationId = Astro.url.searchParams.get("vid");    // when an email is sent and the user clicks on the verification link
const selectedPlanId = Astro.url.searchParams.get("p");      // the stripe price id of the price to be bought

async function getRegistrationStep() {
    const cookie = Astro.cookies.get('authenticate').value;

    // If user does not have an authentication cookie, there's no reason to
    // call the API. User must be on CREATE_ACCOUNT
    if (cookie === undefined) {
        return RegistrationStep.CREATE_ACCOUNT;
    }

    const response = await fetch(API_URL, { headers: { Cookie: `authenticate=${Astro.cookies.get("authenticate").value}` } } );
    const data = await response.json();

    // API responds with data[user] = null when user is not authenticated properly.
    // Have to CREATE_ACCOUNT
    if ('user' in data) {
        return RegistrationStep.CREATE_ACCOUNT;
    }
    
    // If not data[user][email_verified], user haven't verified email yet.
    if (!data['email_verified']) {
        return RegistrationStep.VERIFY_EMAIL;
    }

    // If the user has_noter_access, the user must have gone through Stripe Checkout.
    // User is done with the process.
    if (data['has_noter_access']) {
        return RegistrationStep.DONE;
    }

    // IF data[user][email_verified] and NOT data[user][has_noter_access], they are in the select plan step.
    return RegistrationStep.SELECT_PLAN;
}

async function createCheckoutSession(plan: string) {
    return await fetch(
        `${API_URL}/stripe/create-checkout-session?${new URLSearchParams({
            "plan": plan
        })}`,
        {
            method: 'POST',
            headers: {
                Cookie: `authenticate=${Astro.cookies.get("authenticate").value}`,
            },
        }
    )
    .then(response => response.json())
    .then(data => data['url'])
    .catch(e => null);
}


let newCheckoutSessionUrl: string | null = null;
const currentStep = await getRegistrationStep();

if (currentStep === RegistrationStep.SELECT_PLAN && selectedPlanId !== null) {
    // get url of a new stripe checkout session
    // fetch user stripe_id
    newCheckoutSessionUrl = await createCheckoutSession(selectedPlanId);

    if (newCheckoutSessionUrl === null) {
        // user is not authenticated, redirect to initial route
        return Astro.redirect('/register', 302);
    } else {
        // redirect user to new stripe checkout session
        return Astro.redirect(newCheckoutSessionUrl, 302);
    }
}
---
<FullScreenLayout title="Get Noter" description="">
    <div class="side">
        <h1>Get Noter</h1>
        <p>Your notes and grades are about to level up.</p>
    </div>

    <div class="side">
        <div class="steps">
            { REGISTRATION_STEPS.map((step, i) => <span class:list={{ "step": true, "current": currentStep === i }}>{ step }</span>)}
        </div>

        { () => {
            switch (currentStep) {
                case RegistrationStep.CREATE_ACCOUNT:
                    return <RegisterForm client:load />
                
                case RegistrationStep.VERIFY_EMAIL:
                    return <EmailVerifier client:load verificationId={ verificationId } />
                
                case RegistrationStep.SELECT_PLAN:
                    return <EmailVerifiedMessage />
                        
                case RegistrationStep.DONE:
                    return (
                        <h2>You're all set</h2>
                        <p><strong>Thank you for getting Noter!</strong> If you want to continue to the Noter app, click continue.</p>
                        <ButtonLink href="https://app.getnoter.com">Continue to Noter</ButtonLink>
                    )

                default:
                    return <RegisterForm client:load />
            }
        } }
    </div>
</FullScreenLayout>

<style>
    .steps {
        border: #000000 2px solid;
        font-size: 0.75em;
        margin-bottom: 1rem;
        border-radius: 1rem;
        text-align: center;

        display: flex;
        overflow: hidden;
        gap: 1rem;
    }

    .step {
        padding: 1rem;
        width: 100%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .step.current {
        font-weight: bold;
        background: #000000;
        color: #ffffff;
    }

	@media only screen and (max-width: 675px) {
        .steps {
            flex-direction: column;
        }

        .step {
            padding-right: 0;
            padding-left: 0;
        }
    }
</style>